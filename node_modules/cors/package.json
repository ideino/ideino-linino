{
  "name": "cors",
  "version": "2.2.0",
  "author": {
    "name": "Troy Goode",
    "email": "troygoode@gmail.com",
    "url": "https://github.com/troygoode/"
  },
  "description": "middleware for dynamically or statically enabling CORS in express/connect applications",
  "keywords": [
    "cors",
    "express",
    "connect",
    "middleware"
  ],
  "homepage": "https://github.com/troygoode/node-cors/",
  "repository": {
    "type": "git",
    "url": "git://github.com/troygoode/node-cors.git"
  },
  "contributors": [
    {
      "name": "Troy Goode",
      "email": "troygoode@gmail.com",
      "url": "https://github.com/troygoode/"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "bugs": {
    "url": "https://github.com/troygoode/node-cors/issues"
  },
  "main": "./lib/index.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {},
  "devDependencies": {
    "express": "*",
    "lint": "*",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha",
    "lint": "./node_modules/lint/bin/node-lint lib test"
  },
  "readme": "# `cors`\n\nCORS is a node.js package for providing a [Connect](http://www.senchalabs.org/connect/)/[Express](http://expressjs.com/) middleware that can be used to enable [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) with various options.\n\n**[Follow me (@troygoode) on Twitter!](https://twitter.com/intent/user?screen_name=troygoode)**\n\n[![NPM](https://nodei.co/npm/cors.png?downloads=true&stars=true)](https://nodei.co/npm/cors/)\n\n[![build status](https://secure.travis-ci.org/troygoode/node-cors.png)](http://travis-ci.org/troygoode/node-cors)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Simple Usage](#simple-usage-enable-all-cors-requests)\n  * [Enable CORS for a Single Route](#enable-cors-for-a-single-route)\n  * [Configuring CORS](#configuring-cors)\n  * [Configuring CORS Asynchronously](#configuring-cors-asynchronously)\n  * [Enabling CORS Pre-Flight](#enabling-cors-pre-flight)\n* [Configuration Options](#configuration-options)\n* [Demo](#demo)\n* [License](#license)\n* [Author](#author)\n\n## Installation (via [npm](https://npmjs.org/package/cors))\n\n```bash\n$ npm install cors\n```\n\n## Usage\n\n### Simple Usage (Enable *All* CORS Requests)\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\napp.use(cors());\napp.use(app.router);\n\napp.get('/products/:id', function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for all origins!'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\n### Enable CORS for a Single Route\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\napp.get('/products/:id', cors(), function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for all origins!'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\n### Configuring CORS\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\nvar corsOptions = {\n  origin: 'http://example.com'\n};\n\napp.get('/products/:id', cors(corsOptions), function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for only example.com.'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\n### Configuring CORS w/ Dynamic Origin\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\nvar whitelist = ['http://example1.com', 'http://example2.com'];\nvar corsOptions = {\n  origin: function(origin, callback){\n    var originIsWhitelisted = whitelist.indexOf(origin) !== -1;\n    callback(null, originIsWhitelisted);\n  }\n};\n\napp.get('/products/:id', cors(corsOptions), function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for a whitelisted domain.'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\n### Enabling CORS Pre-Flight\n\nCertain CORS requests are considered 'complex' and require an initial\n`OPTIONS` request (called the \"pre-flight request\"). An example of a\n'complex' CORS request is one that uses an HTTP verb other than\nGET/HEAD/POST (such as DELETE) or that uses custom headers. To enable\npre-flighting, you must add a new OPTIONS handler for the route you want\nto support:\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\napp.options('/products/:id', cors()); // enable pre-flight request for DELETE request\napp.del('/products/:id', cors(), function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for all origins!'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\nYou can also enable pre-flight across-the-board like so:\n\n```\napp.options('*', cors()); // include before other routes\n```\n\n### Configuring CORS Asynchronously\n\n```javascript\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\n\nvar whitelist = ['http://example1.com', 'http://example2.com'];\nvar corsOptionsDelegate = function(req, callback){\n  var corsOptions;\n  if(whitelist.indexOf(req.header('Origin')) !== -1){\n    corsOptions = { origin: true }; // reflect (enable) the requested origin in the CORS response\n  }else{\n    corsOptions = { origin: false }; // disable CORS for this request\n  }\n  callback(null, corsOptions); // callback expects two parameters: error and options\n};\n\napp.get('/products/:id', cors(corsOptionsDelegate), function(req, res, next){\n  res.json({msg: 'This is CORS-enabled for a whitelisted domain.'});\n});\n\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});\n```\n\n## Configuration Options\n\n* `origin`: Configures the **Access-Control-Allow-Origin** CORS header. Expects a string (ex: \"http://example.com\"). Set to `true` to reflect the [request origin](http://tools.ietf.org/html/draft-abarth-origin-09), as defined by `req.header('Origin')`. Set to `false` to disable CORS. Can also be set to a function, which takes the request origin as the first parameter and a callback (which expects the signature `err [object], allow [bool]`) as the second.\n* `methods`: Configures the **Access-Control-Allow-Methods** CORS header. Expects a comma-delimited string (ex: 'GET,PUT,POST') or an array (ex: `['GET', 'PUT', 'POST']`).\n* `allowedHeaders`: Configures the **Access-Control-Allow-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Type,Authorization') or an array (ex: `['Content-Type', 'Authorization]`). If not specified, defaults to reflecting the headers specified in the request's **Access-Control-Request-Headers** header.\n* `exposedHeaders`: Configures the **Access-Control-Expose-Headers** CORS header. Expects a comma-delimited string (ex: 'Content-Range,X-Content-Range') or an array (ex: `['Content-Range', 'X-Content-Range]`). If not specified, no custom headers are exposed.\n* `credentials`: Configures the **Access-Control-Allow-Credentials** CORS header. Set to `true` to pass the header, otherwise it is omitted.\n* `maxAge`: Configures the **Access-Control-Allow-Max-Age** CORS header. Set to an integer to pass the header, otherwise it is omitted.\n\nFor details on the effect of each CORS header, [read this article on HTML5 Rocks](http://www.html5rocks.com/en/tutorials/cors/).\n\n## Demo\n\nA demo that illustrates CORS working (and not working) using jQuery is available here: [http://node-cors-client.herokuapp.com/](http://node-cors-client.herokuapp.com/)\n\nCode for that demo can be found here:\n\n* Client: [https://github.com/TroyGoode/node-cors-client](https://github.com/TroyGoode/node-cors-client)\n* Server: [https://github.com/TroyGoode/node-cors-server](https://github.com/TroyGoode/node-cors-server)\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\n[Troy Goode](https://github.com/TroyGoode) ([troygoode@gmail.com](mailto:troygoode@gmail.com))\n",
  "readmeFilename": "README.md",
  "_id": "cors@2.2.0",
  "dist": {
    "shasum": "545975b157811ced5c33a16ca87148ca4cd45fad"
  },
  "_from": "cors@",
  "_resolved": "https://registry.npmjs.org/cors/-/cors-2.2.0.tgz"
}
